---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Absolute.
--- ZoneManager pour la communauté.
--- DateTime: 24/01/2023 21:42
---
---@class ZoneManager
ZoneManager = {};

function ZoneManager:init()
    self.zones = {};
    self.zoneIndex = 0;
end
--- Créer une zone pour manager les joueurs à l'intérieur
---@param coords table
---@param radius number
---@param onEnter function
---@param onUpdate function
---@param onExit function
---@return string retour l'id de la zone pour pouvoir la supprimer
function ZoneManager:createZone(coords,radius,onEnter,onUpdate,onExit,onTick)
    self.zoneIndex = self.zoneIndex + 1;

    local zone = {
        id = self.zoneIndex,
        isInZone = false,
        coords = coords,
        radius = radius,
        onEnter = onEnter,
        onUpdate = onUpdate,
        onExit = onExit,
        onTick = onTick,
        players = {},
    };
    self.zones["zone"..self.zoneIndex] = zone;
    self.closestZones = {};
    self.debugDistance = 100;
    return "zone"..self.zoneIndex;
end

--- Créer une zone pour manager les joueurs à l'intérieur
---@param coords table
---@param radius number
---@param onEnter function
---@param onUpdate function
---@param onExit function
function ZoneManager:createZoneWithJson(coords,radius,data)
    self.zoneIndex = self.zoneIndex + 1;

    local zone = {
        id = self.zoneIndex,
        isInZone = false,
        coords = coords,
        radius = radius,
        onEnter = data.onEnter,
        onUpdate = data.onUpdate,
        onExit = data.onExit,
        onTick = data.onTick,
        players = {},
    };
    self.zones["zone"..self.zoneIndex] = zone;
    self.closestZones = {};
    self.debugDistance = 100;
    return "zone"..self.zoneIndex;
end

--- Tick pour analyser les joueurs dans les zones
function ZoneManager:tickAnalyze()
    Citizen.CreateThread(function()
        while true do
            Wait(Config.timeTick);
            self.closestZones = {};
            local playerCoords = GetEntityCoords(PlayerPedId());
            for k,zone in pairs(self.zones) do
                TickManager:removeTick("zone_on_press_"..zone.id);
                local distance = #(playerCoords - zone.coords);
                if self.debug and distance <= self.debugDistance then
                    self.closestZones[k] = zone
                else
                    self.closestZones[k] = nil;
                end
                if distance <= zone.radius then
                    if not zone.isInZone then
                        zone.isInZone = true;
                        if zone.onEnter then
                            zone.onEnter(zone,distance);
                        end
                    end
                    if zone.onUpdate then
                        zone.onUpdate(zone,distance);
                        if zone.onTick then
                            TickManager:addTick("zone_on_press_"..zone.id,function()
                                zone.onTick(zone,distance);
                            end)
                        end
                    end
                else
                    if zone.isInZone then
                        zone.isInZone = false;
                        if zone.onExit then
                            zone.onExit(zone,distance);
                        end
                    end
                end
            end
        end
    end)
end

function ZoneManager:startDebugZone()
    self.debug = true;
    Citizen.CreateThread(function()
        while self.debug do
            for i,zone in pairs(self.closestZones) do
                DrawMarker(28, zone.coords.x, zone.coords.y, zone.coords.z, 0, 0, 0, 0, 0, 0, zone.radius +.0, zone.radius +.0, zone.radius+.0, Config.debugColor.red, Config.debugColor.green, Config.debugColor.blue, 40, 0, 0, 0, 0, 0, 0, 0);
            end
            Wait(0);
        end
    end)
end

function ZoneManager:stopDebugZone()
    self.debug = false;
end

function ZoneManager:getZone(id)
    return self.zones[id];
end

function ZoneManager:setZone(id,zone)
    self.zones[id] = zone;
end

function ZoneManager:deleteZone(id)
    if id then
        self.zones[id] = nil;
        TickManager:removeTick("zone_on_press_"..id);
    end
end

ZoneManager:init();
--- on analyse les zones
ZoneManager:tickAnalyze();

exports("createZone",function(coords,radius,onEnter,onUpdate,onExit)
    return ZoneManager:createZone(coords,radius,onEnter,onUpdate,onExit);
end);

exports("getZone",function(id)
    return ZoneManager:getZone(id);
end);

exports("setZone",function(id,zone)
    ZoneManager:setZone(id,zone);
end);

exports("deleteZone",function(id)
    ZoneManager:deleteZone(id)
end)

if Config.activeDebug then
    local debug = false;
    RegisterCommand("zoneDebug",function()
        debug = not debug;
        if debug then
            ZoneManager:startDebugZone();
        else
            ZoneManager:stopDebugZone();
        end
    end)
end

